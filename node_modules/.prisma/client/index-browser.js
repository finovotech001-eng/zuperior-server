
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  email: 'email',
  password: 'password',
  name: 'name',
  phone: 'phone',
  country: 'country',
  createdAt: 'createdAt',
  emailVerified: 'emailVerified',
  lastLoginAt: 'lastLoginAt',
  role: 'role',
  status: 'status'
};

exports.Prisma.KYCScalarFieldEnum = {
  id: 'id',
  isDocumentVerified: 'isDocumentVerified',
  isAddressVerified: 'isAddressVerified',
  verificationStatus: 'verificationStatus',
  documentReference: 'documentReference',
  addressReference: 'addressReference',
  amlReference: 'amlReference',
  documentSubmittedAt: 'documentSubmittedAt',
  addressSubmittedAt: 'addressSubmittedAt',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.MT5AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  password: 'password',
  leverage: 'leverage'
};

exports.Prisma.MT5TransactionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  amount: 'amount',
  status: 'status',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  comment: 'comment',
  mt5AccountId: 'mt5AccountId',
  createdAt: 'createdAt',
  currency: 'currency',
  depositId: 'depositId',
  withdrawalId: 'withdrawalId',
  userId: 'userId',
  processedBy: 'processedBy',
  processedAt: 'processedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountType: 'accountType',
  balance: 'balance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  amount: 'amount',
  status: 'status',
  currency: 'currency',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  description: 'description',
  metadata: 'metadata',
  depositId: 'depositId',
  withdrawalId: 'withdrawalId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.DepositScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mt5AccountId: 'mt5AccountId',
  amount: 'amount',
  currency: 'currency',
  method: 'method',
  paymentMethod: 'paymentMethod',
  transactionHash: 'transactionHash',
  proofFileUrl: 'proofFileUrl',
  bankDetails: 'bankDetails',
  cryptoAddress: 'cryptoAddress',
  depositAddress: 'depositAddress',
  externalTransactionId: 'externalTransactionId',
  status: 'status',
  rejectionReason: 'rejectionReason',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  rejectedAt: 'rejectedAt',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WithdrawalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mt5AccountId: 'mt5AccountId',
  amount: 'amount',
  method: 'method',
  bankDetails: 'bankDetails',
  cryptoAddress: 'cryptoAddress',
  status: 'status',
  rejectionReason: 'rejectionReason',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  rejectedAt: 'rejectedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  currency: 'currency',
  externalTransactionId: 'externalTransactionId',
  paymentMethod: 'paymentMethod',
  processedAt: 'processedAt',
  walletAddress: 'walletAddress'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  adminId: 'adminId',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  oldValues: 'oldValues',
  newValues: 'newValues',
  createdAt: 'createdAt'
};

exports.Prisma.SystemSettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  category: 'category',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  permissions: 'permissions',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  address: 'address',
  currency: 'currency',
  network: 'network',
  status: 'status',
  submittedAt: 'submittedAt',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
};

exports.Prisma.DefaultMT5AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mt5AccountId: 'mt5AccountId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InstrumentScalarFieldEnum = {
  id: 'id',
  symbol: 'symbol',
  name: 'name',
  description: 'description',
  category: 'category',
  group: 'group',
  digits: 'digits',
  contractSize: 'contractSize',
  minVolume: 'minVolume',
  maxVolume: 'maxVolume',
  volumeStep: 'volumeStep',
  spread: 'spread',
  isActive: 'isActive',
  tradingHours: 'tradingHours',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  revoked: 'revoked'
};

exports.Prisma.UserFavoriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  instrumentId: 'instrumentId',
  sortOrder: 'sortOrder',
  addedAt: 'addedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password_hash: 'password_hash',
  admin_role: 'admin_role',
  is_active: 'is_active',
  last_login: 'last_login',
  login_attempts: 'login_attempts',
  locked_until: 'locked_until',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Admin_login_logScalarFieldEnum = {
  id: 'id',
  admin_id: 'admin_id',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  location: 'location',
  device: 'device',
  browser: 'browser',
  os: 'os',
  success: 'success',
  failure_reason: 'failure_reason',
  created_at: 'created_at'
};

exports.Prisma.Balance_operation_historyScalarFieldEnum = {
  id: 'id',
  admin_id: 'admin_id',
  mt5_login: 'mt5_login',
  operation_type: 'operation_type',
  amount: 'amount',
  currency: 'currency',
  description: 'description',
  status: 'status',
  error_message: 'error_message',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  created_at: 'created_at'
};

exports.Prisma.Chat_conversationsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  user_name: 'user_name',
  user_email: 'user_email',
  admin_id: 'admin_id',
  status: 'status',
  priority: 'priority',
  subject: 'subject',
  last_message_at: 'last_message_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  closed_at: 'closed_at',
  closed_by: 'closed_by',
  tags: 'tags',
  unread_count_admin: 'unread_count_admin',
  unread_count_user: 'unread_count_user'
};

exports.Prisma.Chat_messagesScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  sender_id: 'sender_id',
  sender_name: 'sender_name',
  sender_type: 'sender_type',
  message_type: 'message_type',
  content: 'content',
  metadata: 'metadata',
  is_read: 'is_read',
  read_at: 'read_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Chat_participantsScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  user_id: 'user_id',
  user_name: 'user_name',
  user_type: 'user_type',
  role: 'role',
  joined_at: 'joined_at',
  left_at: 'left_at',
  is_active: 'is_active'
};

exports.Prisma.Group_commission_structuresScalarFieldEnum = {
  id: 'id',
  group_id: 'group_id',
  structure_name: 'structure_name',
  usd_per_lot: 'usd_per_lot',
  spread_share_percentage: 'spread_share_percentage',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Ib_adminScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password_hash: 'password_hash',
  role: 'role',
  is_active: 'is_active',
  last_login: 'last_login',
  login_attempts: 'login_attempts',
  locked_until: 'locked_until',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Ib_requestsScalarFieldEnum = {
  id: 'id',
  full_name: 'full_name',
  email: 'email',
  password_hash: 'password_hash',
  status: 'status',
  ib_type: 'ib_type',
  submitted_at: 'submitted_at',
  approved_at: 'approved_at',
  usd_per_lot: 'usd_per_lot',
  spread_percentage_per_lot: 'spread_percentage_per_lot',
  admin_comments: 'admin_comments',
  group_id: 'group_id',
  structure_id: 'structure_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Manual_gatewayScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  details: 'details',
  icon_url: 'icon_url',
  qr_code_url: 'qr_code_url',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Mt5_groupsScalarFieldEnum = {
  id: 'id',
  group_id: 'group_id',
  name: 'name',
  description: 'description',
  synced_at: 'synced_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Payment_gatewayScalarFieldEnum = {
  id: 'id',
  wallet_name: 'wallet_name',
  deposit_wallet_address: 'deposit_wallet_address',
  api_key: 'api_key',
  secret_key: 'secret_key',
  gateway_type: 'gateway_type',
  is_active: 'is_active',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SymbolsScalarFieldEnum = {
  id: 'id',
  symbol_name: 'symbol_name',
  description: 'description',
  symbol_type: 'symbol_type',
  group_name: 'group_name',
  digits: 'digits',
  spread: 'spread',
  contract_size: 'contract_size',
  profit_mode: 'profit_mode',
  enable: 'enable',
  swap_mode: 'swap_mode',
  swap_long: 'swap_long',
  swap_short: 'swap_short',
  swap3_day: 'swap3_day',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Ib_group_assignmentsScalarFieldEnum = {
  id: 'id',
  ib_request_id: 'ib_request_id',
  group_id: 'group_id',
  group_name: 'group_name',
  structure_id: 'structure_id',
  structure_name: 'structure_name',
  usd_per_lot: 'usd_per_lot',
  spread_share_percentage: 'spread_share_percentage',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Ib_trade_historyScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  account_id: 'account_id',
  user_id: 'user_id',
  ib_request_id: 'ib_request_id',
  symbol: 'symbol',
  order_type: 'order_type',
  volume_lots: 'volume_lots',
  open_price: 'open_price',
  close_price: 'close_price',
  profit: 'profit',
  ib_commission: 'ib_commission',
  take_profit: 'take_profit',
  stop_loss: 'stop_loss',
  created_at: 'created_at',
  updated_at: 'updated_at',
  synced_at: 'synced_at',
  group_id: 'group_id'
};

exports.Prisma.Support_ticketsScalarFieldEnum = {
  id: 'id',
  ticket_no: 'ticket_no',
  parent_id: 'parent_id',
  title: 'title',
  description: 'description',
  ticket_type: 'ticket_type',
  status: 'status',
  priority: 'priority',
  assigned_to: 'assigned_to',
  account_number: 'account_number',
  tags: 'tags',
  created_at: 'created_at',
  updated_at: 'updated_at',
  last_reply_at: 'last_reply_at',
  closed_at: 'closed_at',
  closed_by: 'closed_by'
};

exports.Prisma.Support_ticket_repliesScalarFieldEnum = {
  id: 'id',
  ticket_id: 'ticket_id',
  reply_id: 'reply_id',
  sender_id: 'sender_id',
  sender_name: 'sender_name',
  sender_type: 'sender_type',
  content: 'content',
  is_internal: 'is_internal',
  attachments: 'attachments',
  created_at: 'created_at',
  updated_at: 'updated_at',
  is_read: 'is_read'
};

exports.Prisma.Support_articlesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  content: 'content',
  excerpt: 'excerpt',
  category: 'category',
  tags: 'tags',
  views: 'views',
  helpful_count: 'helpful_count',
  not_helpful_count: 'not_helpful_count',
  is_published: 'is_published',
  author_id: 'author_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  published_at: 'published_at'
};

exports.Prisma.Support_faqScalarFieldEnum = {
  id: 'id',
  question: 'question',
  answer: 'answer',
  category: 'category',
  tags: 'tags',
  helpful_count: 'helpful_count',
  not_helpful_count: 'not_helpful_count',
  display_order: 'display_order',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Support_categoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  icon: 'icon',
  display_order: 'display_order',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Support_repliesScalarFieldEnum = {
  id: 'id',
  ticket_id: 'ticket_id',
  sender_id: 'sender_id',
  sender_name: 'sender_name',
  sender_type: 'sender_type',
  content: 'content',
  is_internal: 'is_internal',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  KYC: 'KYC',
  MT5Account: 'MT5Account',
  MT5Transaction: 'MT5Transaction',
  Account: 'Account',
  Transaction: 'Transaction',
  Deposit: 'Deposit',
  Withdrawal: 'Withdrawal',
  ActivityLog: 'ActivityLog',
  SystemSetting: 'SystemSetting',
  Role: 'Role',
  PaymentMethod: 'PaymentMethod',
  UserRole: 'UserRole',
  DefaultMT5Account: 'DefaultMT5Account',
  Instrument: 'Instrument',
  RefreshToken: 'RefreshToken',
  UserFavorite: 'UserFavorite',
  admin: 'admin',
  admin_login_log: 'admin_login_log',
  balance_operation_history: 'balance_operation_history',
  chat_conversations: 'chat_conversations',
  chat_messages: 'chat_messages',
  chat_participants: 'chat_participants',
  group_commission_structures: 'group_commission_structures',
  ib_admin: 'ib_admin',
  ib_requests: 'ib_requests',
  manual_gateway: 'manual_gateway',
  mt5_groups: 'mt5_groups',
  payment_gateway: 'payment_gateway',
  symbols: 'symbols',
  ib_group_assignments: 'ib_group_assignments',
  ib_trade_history: 'ib_trade_history',
  support_tickets: 'support_tickets',
  support_ticket_replies: 'support_ticket_replies',
  support_articles: 'support_articles',
  support_faq: 'support_faq',
  support_categories: 'support_categories',
  support_replies: 'support_replies'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
